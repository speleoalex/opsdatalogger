<!DOCTYPE html>
<html>

<head>
    <title>FluxyLogger Terminal</title>
    <style>
        footer {
            min-height: 50px;
            /* Adjust as needed */
            /* Styles for your footer */
        }

        table {
            width: 100%;
        }

        thead td {
            color: #ffff00;
        }

        thead {
            color: #ffffff;
        }

        body {
            font-family: 'Courier New', monospace;
            background-color: black;
            color: limegreen;
            margin: 10px;
            display: flex;
            /* or grid */
            flex-direction: column;
            /* not needed for grid */
            height: 100vh;
            margin: 0;
            /* Remove default margin */
        }

        #buttons {
            padding: 5px;

            background-color: #202020;
            /*height: 40px;*/
        }

        #footer {
            padding: 5px;
            ;
            /*  height: 40px;
            margin-top: 5px;*/
        }

        .ok {
            color: greenyellow !important;

        }

        .fail {
            color: red !important;

        }

        .prehead {
            color: orange !important;

        }

        #output {
            height: 60vh;
            /* Adjust this value as needed */
            border: 1px solid limegreen;
            background-color: #202020;
            color: #fafafa;
            overflow-y: auto;
            white-space: pre-wrap;
            padding: 5px;
            margin: 5px;
            flex-grow: 1;
            /* Flexbox: Allow this element to grow to fill space */
            /* Grid: Define rows and assign output to a row that takes up remaining space */
            overflow-y: auto;
            /* Scroll inside output if needed */
        }

        #input {
            width: calc(100% - 80px);
            color: limegreen;
            background-color: #202020;
            border: 1px solid limegreen;
            padding: 5px;
            display: inline-block;
        }

        #send {
            display: inline-block;
            width: 58px;
            padding: 5px;
            margin-left: 5px;
            border: 1px solid limegreen
        }

        .delete {
            background-color: red;
            margin-left: 2px;
            ;
        }

        .continue {
            background-color: rgb(136, 92, 255);
        }

        button,
        select {
            background-color: limegreen;
            color: black;
            border: none;
            padding: 5px 15px;
            cursor: pointer;
            margin: 3px;
            border-radius: 6px;
        }

        #loggerviewer {
            background-color: orange;
        }

        button:disabled {
            background-color: grey;
        }
    </style>
</head>

<body onload="TranslateHtml() ">
    <nav id="buttons">
        <button id="loggerviewer" style="float:right" data-i18n='auto'
            onclick="window.location='loggerviewer.htm'">Logger viewer</button><button data-i18n='auto'
            id="connect">Connect</button><select name="baudrate" id="baudrate-select">
            <option value="9600">9600</option>
            <option selected value="19200">19200</option>
            <option value="57600">57600</option>
            <option value="115200">115200</option>
        </select><button id="disconnect" data-i18n="auto"
            style="display:none;background-color: rgb(128, 0, 0);">Disconnect</button><button id="logs" data-i18n='auto'
            disabled>View stored logs</button><button id="settime" data-i18n='auto' disabled>Send date and
            time</button><button id="setinterval" disabled data-i18n="auto">Set Interval</button>
    </nav>
    <div id="output"></div>
    <footer id="footer">
        <input type="text" id="input" id="sendtext"><button data-i18n='auto' id="send">Send</button><br>
    </footer>
    <script>
        if (typeof (__language) === 'undefined')
            __language = new Array();

        __language['it-IT'] = {
            "connect": "Connetti",
            "logger viewer": "Visualizzatore di registrazioni",

            "Confirm delete file?": "Confermi di voler eliminare il file?",
            "view stored logs": "Vedi logs memorizzati",
            "download": "Scarica",
            "delete": "elimina",
            "disconnect": "Disconnetti",
            "send": "invia",
            "chart": "grafico",
            "exit": "esci",
            "Prehead": "preriscaldamento",
            "set interval": "Imposta intervallo",
            "send date and time": "invia data e ora"
        };


    </script>





    <script>
        /**
         * 
         * @param {type} str
         * @param {type} LowerCaseMode
         * @param {type} lang
         */
        function _i18n(str, LowerCaseMode, lang) {
            try {
                if (lang === undefined) {
                    lang = navigator.language || navigator.userLanguage;
                }
                console.log(lang);
                var l = "en";
                var strori = str;
                LowerCaseMode = (typeof (LowerCaseMode) !== 'undefined') ? LowerCaseMode : "";
                if (LowerCaseMode === "auto") {
                    str = str.toLowerCase();
                }
                lang = (typeof (lang) !== 'undefined') ? lang : l;
                var ret = "";
                if (typeof (__language) === 'undefined' || __language[lang] === undefined || __language[lang][str] === undefined) {
                    ret = str;
                }
                else {
                    ret = __language[lang][str];
                }

                if (LowerCaseMode === "auto") {


                    if (strori[0].search(/[A-Z]/) !== -1 && strori[1].search(/[a-z]/) !== -1) {
                        LowerCaseMode = "Aa";
                    }
                    else if (strori[0].search(/[A-Z]/) !== -1 && strori[1].search(/[A-Z]/) !== -1) {
                        LowerCaseMode = "AA";
                    }
                    else if (strori[0].search(/[a-z]/) !== -1 && strori[1].search(/[a-z]/) !== -1) {
                        LowerCaseMode = "aa";
                    }
                }
                //------------------------------------------------------------------------->
                switch (LowerCaseMode) {
                    case "Aa":
                        ret = ret.charAt(0).toUpperCase() + ret.slice(1);
                        break;
                    case "AA":
                        ret = ret.toUpperCase();
                        break;
                    case "aa":
                        ret = ret.toLowerCase();
                        break;
                }
                //-------------------------------------------------------------------------<
                console.log(ret);
                return ret;
            }
            catch (e) {
                console.log(e);
                return str;
            }
        }
        function TranslateHtml() {
            document.querySelectorAll("[data-i18n='auto']").forEach(function (element) {
                var contents = element.childNodes;
                if (contents.length > 0) {
                    if (contents[0].nodeType === Node.TEXT_NODE) {
                        element.innerHTML = _i18n(element.innerHTML, "auto");
                        for (let i = 1; i < contents.length; i++) {
                            element.appendChild(contents[i].cloneNode(true));
                        }
                    }
                }
            });

        }
        var openViewer = false;
        function getSelectedBaudRate() {
            var select = document.getElementById("baudrate-select");
            var selectedBaudRate = select.options[select.selectedIndex].value;
            return selectedBaudRate;
        }
        let port, reader, writer, inDownload;
        inDownload = false;
        inListFile = false;
        document.getElementById('connect').addEventListener('click', async () => {
            if (navigator.serial === undefined) {
                alert("Your browser does not support USB port reading");
            }
            try {
                port = await navigator.serial.requestPort();

            } catch (e) {
                //alert(e);
            }
            console.log("Open boudrate:" + getSelectedBaudRate());
            await port.open({ baudRate: getSelectedBaudRate() });

            const decoder = new TextDecoderStream();
            const inputDone = port.readable.pipeTo(decoder.writable);
            reader = decoder.readable.getReader();

            const encoder = new TextEncoderStream();
            const outputDone = encoder.readable.pipeTo(port.writable);
            writer = encoder.writable.getWriter();

            document.getElementById('connect').style.display = "none";
            document.getElementById('baudrate-select').style.display = "none";
            document.getElementById('disconnect').style.display = "inline-block";
            document.getElementById('logs').disabled = false;
            document.getElementById('settime').disabled = false;
            document.getElementById('setinterval').disabled = false;
            readLoop();
        });
        document.getElementById('logs').addEventListener('click', async () => {
            writer.write("logs\r\n");
            inListFile = true;
        }
        );

        document.getElementById('setinterval').addEventListener('click', async () => {
            var interval = prompt("Enter interval in seconds:", "");
            if (interval == null || isNaN(interval) || interval < 1) {
                alert("Invalid interval");
            }
            else {
                sendSerial("setconfig");
                setTimeout(() => {
                    sendSerial(interval);
                    setTimeout(() => {
                        writer.write("\r\n");
                    }, 2000);
                }, 2000);

            }
        }
        );


        document.getElementById('settime').addEventListener('click', async () => {
            sendSerial("settime");
            setTimeout(() => {
                var n = new Date().getFullYear();
                sendSerial(n);
                setTimeout(() => {
                    var n = new Date().getMonth() + 1;
                    sendSerial(n);
                    setTimeout(() => {
                        var n = new Date().getDate();
                        sendSerial(n);
                        setTimeout(() => {
                            var n = new Date().getHours();
                            sendSerial(n);
                            setTimeout(() => {
                                var n = new Date().getMinutes();
                                sendSerial(n);
                                setTimeout(() => {
                                    var n = new Date().getSeconds();
                                    sendSerial(n);
                                }, 1000);
                            }, 1000);
                        }, 1000);
                    }, 1000);
                }, 1000);
            }, 2000);
        }
        );
        function ascii(a) { return a.charCodeAt(0); }
        var lastch = "";
        var filetext = "";
        var sizeDownload = 0;
        var textContents = "";
        var textListFiles = "";
        async function readLoop() {
            let outputDiv = document.getElementById('output');
            while (true) {
                let { value, done } = await reader.read();
                if (done) {
                    reader.releaseLock();
                    console.log("done");
                    break;
                }
                if (inDownload) {
                    filetext += value
                    outputDiv.innerHTML = "received " + filetext.length + " of " + sizeDownload + " bytes";
                    findFileContents(filetext);
                }
                else {
                    //work arround --->
                    if (false && lastch == "\r" && value[0] == "\n") {
                        textContents += value.replace("\n", "");
                    }
                    else {
                        textContents += value;
                    }
                    //work arround ---<

                    if (inListFile) {
                        textListFiles += value;
                        createButtonsForFile(textListFiles);
                    }
                    else {
                        document.getElementById('output').innerHTML = HighLighting(textContents);
                    }
                    if (value.length > 0) {
                        lastch = value[value.length - 1];
                    }
                    outputDiv.scrollTop = outputDiv.scrollHeight;
                }
                //console.log("received:\"" + value + "\"");
                //console.log("lastch:\"" + ascii(lastch) + "\"");
            }
        }

        document.getElementById('disconnect').addEventListener('click', async () => {
            try {

                if (reader) {
                    await reader.cancel();
                    await reader.releaseLock();
                }
                if (writer) {
                    await writer.close();
                    await writer.releaseLock();
                }
                if (port) {
                    await port.close();
                }

                document.getElementById('connect').disabled = false;
                document.getElementById('disconnect').disabled = true;

            }
            catch (e) {
                window.location.reload();
            }
        });


        document.getElementById('send').addEventListener('click', () => {
            inviaDati();
        });

        function doDelete(nomeFile) {
            if (confirm(_i18n("Confirm delete file?"))) {
                clearOutput();
                sendSerial("e");
                setTimeout(() => {
                    sendSerial("rm " + nomeFile.trim());
                }, 500);
            }
        }

        function inviaDati() {
            const text = document.getElementById('input').value + '\r\n';
            // console.log("Send:" + text);
            writer.write(text);
            document.getElementById('input').value = '';
        }

        document.getElementById('input').addEventListener('keypress', (event) => {
            if (event.key === 'Enter') {
                inviaDati();
            }
        });
        function sendSerial(text) {
            document.getElementById('input').value = text;
            setTimeout(() => {
                document.getElementById('send').click();
            }, 500);
        }
        function clearOutput() {
            document.getElementById('output').innerHTML = "";
            textListFiles = "";
            textContents = "";
        }
        function downloadFileClick(filename, size, view) {
            inDownload = true;
            textListFiles = "";
            sizeDownload = size;
            if (view) {
                openViewer = true;

            }
            else {
                openViewer = false;
            }
            sendDownloadFileName(filename);

        }
        function HighLighting(testo) {
            var startTable = false
            testo = testo.replace("\r\n", "\n");
            testo = testo.replace("\r", "\n");
            var lines = testo.split("\n");
            for (var i in lines) {
                if (lines[i].trim().endsWith(" ok") || lines[i].trim() == "ok") {
                    lines[i] = "<b class=\"ok\">" + lines[i].trim() + "</b>";
                }
                if (lines[i].trim().endsWith(" failed") || lines[i].trim() == "failed") {
                    lines[i] = "<span class=\"fail\">" + lines[i].trim() + "</span>";
                }
                if (lines[i].trim() == "Prehead") {
                    lines[i] = "<span class=\"prehead\">" + _i18n("Prehead") + "</span>";
                }
                if (lines[i].trim() == "unknown command") {
                    lines[i] = "<em class=\"fail\">" + lines[i].trim() + "</em>";
                }
                if (lines[i].includes("FluxyLogger ")) {
                    lines[i] = "<h3>" + lines[i].trim() + "</h3>";
                }

                if (lines[i].includes(';')) {
                    lines[i] = "<tr><td>" + lines[i].trim().replace(/;/g, "</td><td>") + "</td></tr>";
                }
                if (lines[i].includes('date Y-m-d m:s')) {
                    lines[i] = "<table><thead>" + lines[i].replace(/"/g, "") + "</thead>";
                    startTable = true;
                }
                if (!lines[i].includes('<td>') && startTable) {
                    startTable = false;
                    lines[i] = "</table>";
                }
                if (startTable && i >= lines.length - 1) {
                    lines[i] = "</table>";
                    startTable = false;
                }




            }
            html = lines.join("\n");
            //console.log("testo=\"" + testo+"\"");
            //console.log("html=\"" + html+"\"");
            return html;
        }
        function formatDateTime(fileName) {
            // Controllo del formato del nome del file
            const regex = /^\d{4}-\d{2}-\d{2}_\d{2}\.\d{2}\.\d{2}\.txt$/;
            if (!regex.test(fileName)) {
                return fileName; // Restituisce il nome del file in caso di formato errato
            }

            try {
                // Estrazione di componenti data e ora dal nome del file
                const datePart = fileName.split('_')[0];
                const timePart = fileName.split('_')[1].split('.')[0] + '.' + fileName.split('_')[1].split('.')[1] + '.' + fileName.split('_')[1].split('.')[2];
                const [year, month, day] = datePart.split('-').map(Number);
                const [hour, minute, second] = timePart.split('.').map(Number);

                // Creazione dell'oggetto Date
                const date = new Date(year, month - 1, day, hour, minute, second);

                // Formattazione della data e dell'ora secondo le impostazioni locali del browser
                const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric' };

                // Formattazione della data secondo le impostazioni locali del browser
                return date.toLocaleString(undefined, options);
            } catch (error) {
                return ""; // Restituisce il nome del file in caso di errore
            }
        }

        function createButtonsForFile(testo) {
            const inizio = testo.indexOf("Files:");
            let html = "";
            if (inizio == -1) {
                return;
            }
            const fine = testo.indexOf("Type Filename or e to exit");
            if (inizio !== -1 && fine !== -1) {
                try {
                    const listaFile = testo.substring(inizio + "Files:".length, fine).trim().split('\n');
                    listaFile.sort();
                    const outputDiv = document.getElementById('output');
                    outputDiv.innerHTML = ''; // Pulisci il div
                    listaFile.forEach(file => {
                        const nomeFile = file.split('\t')[0].trim();

                        if (nomeFile.indexOf(".txt") !== -1 || nomeFile.indexOf(".csv") !== -1) {
                            const size = file.split('\t')[1].trim();

                            html += "<button onclick=\"downloadFileClick('" + nomeFile + "'," + size + ",false)\">" + nomeFile + "</button>";
                            html += "<button onclick=\"downloadFileClick('" + nomeFile + "'," + size + ",true)\">" + _i18n("chart","Aa") + "</button>";
                            html += "<button class=\"delete\" onclick=\"doDelete('" + nomeFile + "')\">" + _i18n("delete") + "</button>" + size + " bytes\r\n" + formatDateTime(nomeFile) + "\r\n\r\n";

                        }
                    });
                    html += "<button class=\"continue\" onclick=\"clearOutput();;sendSerial('e');\">Exit</button><br />";
                    outputDiv.innerHTML = html;
                }
                catch (e) {

                }
                inListFile = false;
                filetext = "";

            }
        }
        function saveToSessionStorage(key, value) {
            try {
                sessionStorage.setItem(key, value);
                console.log('Dato salvato con successo');
            } catch (e) {
                console.error('Errore nel salvataggio dei dati', e);
            }
        }
        function readFromSessionStorage(key) {
            try {
                const value = sessionStorage.getItem(key);
                if (value === null) {
                    console.log('Nessun dato trovato per la chiave:', key);
                    return null;
                } else {
                    console.log('Dato trovato:', value);
                    return value;
                }
            } catch (e) {
                console.error('Errore nella lettura dei dati', e);
                return null;
            }
        }
        function findFileContents(testo) {
            //            const testo = document.getElementById('output').innerHTML;
            const fine = testo.indexOf("End transmission:");
            if (fine === -1) {
                return;
            }
            const filenameOk = testo.indexOf(".txt");
            const filenameOk2 = testo.indexOf(".csv");
            if (filenameOk === -1 && filenameOk2 === -1) {
                return;
            }

            document.getElementById('output').innerHTML = "Start download file:";
            //console.log(testo);
            const inizio = testo.indexOf("Start transmission:");
            if (inizio !== -1 && fine !== -1 && filenameOk !== -1) {
                const nomeFile = testo.split("End transmission:")[1].trim();
                const contents = testo.substring(inizio + "Start transmission:".length, fine).trim();
                document.getElementById('output').innerHTML = "Download starting...";
                if (openViewer) {
                    saveToSessionStorage("csv", contents);
                    window.open("loggerviewer.htm")  ;
                }
                else {
                    scaricaFile(nomeFile, contents);
                }
                document.getElementById('output').innerHTML = "";
                inDownload = false;
            }
        }
        function scaricaFile(nomeFile, contents) {
            const elemento = document.createElement('a');
            elemento.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(contents));
            elemento.setAttribute('download', nomeFile);
            // Nascondi l'elemento per non modificare il layout della pagina
            elemento.style.display = 'none';
            // Aggiungi l'elemento al corpo del documento
            document.body.appendChild(elemento);
            // Simula un click sull'elemento
            elemento.click();
            // Rimuovi l'elemento dal documento
            document.body.removeChild(elemento);
        }

        function sendDownloadFileName(filename) {
            const outputDiv = document.getElementById('output');
            outputDiv.innerHTML = '';
            writer.write(filename + "\r\n");

        }

    </script>
</body>

</html>